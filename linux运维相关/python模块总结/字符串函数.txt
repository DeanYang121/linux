常用操作字符串的函数:

  类型转换函数 
    chr(i) 把一个ASCII数值,变成字符 
    ord(i) 把一个字符或者unicode字符,变成ASCII数值 
    oct(x) 把整数x变成八进制表示的字符串 
    hex(x) 把整数x变成十六进制表示的字符串 
    str(obj) 得到obj的字符串描述 
    list(seq) 把一个sequence转换成一个list 
    tuple(seq) 把一个sequence转换成一个tuple 
    dict(),dict(list) 转换成一个dictionary 
    int(x) 转换成一个integer 
    long(x) 转换成一个long interger 
    float(x) 转换成一个浮点数 
    complex(x) 转换成复数 
    max(...) 求最大值 
    min(...) 求最小值 

split()：拆分字符串。通过指定分隔符对字符串进行切片，并返回分割后的字符串列表（list）
os.path.split()：按照路径将文件名和路径分割开


1、split()函数
语法：str.split(str="",num=string.count(str))[n]
参数说明：
str：   表示为分隔符，默认为空格，但是不能为空('')。若字符串中没有分隔符，则把整个字符串作为列表的一个元素
num：表示分割次数。如果存在参数num，则仅分隔成 num+1 个子字符串，并且每一个子字符串可以赋给新的变量
[n]：   表示选取第n个分片
注意：当使用空格作为分隔符时，对于中间为空的项会自动忽略

2、os.path.split()函数
语法：os.path.split('PATH')
参数说明：
PATH指一个文件的全路径作为参数：
如果给出的是一个目录和文件名，则输出路径和文件名
如果给出的是一个目录名，则输出路径和为空文件名

>>> str="hello boy<[www.doiido.com]>byebye"
  
>>> print str.split("[")[1].split("]")[0]
www.doiido.com
  
>>> print str.split("[")[1].split("]")[0].split(".")
['www', 'doiido', 'com']

Python strip() 方法用于移除字符串头尾指定的字符（默认为空格）。

string.capitalize() 把字符串的第一个字符大写
str.count(sub, start= 0,end=len(string))返回 str 在 string 里面出现的次数，如果 start或者 end 指定则返回指定范围内 str 出现的次数
str.center(width[, fillchar]) 回一个原字符串居中,并使用空格填充至长度 width 的新字符串
string.decode(encoding='UTF-8', errors='strict')  errors -- 设置不同错误的处理方案。默认为 'strict',意为编码错误引起一个UnicodeError。 其他可能得值有 'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace' 以及通过 codecs.register_error() 注册的任何值
str.encode(encoding='UTF-8',errors='strict')errors -- 设置不同错误的处理方案。默认为 'strict',意为编码错误引起一个UnicodeError。 其他可能得值有 'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace' 以及通过 codecs.register_error() 注册的任何值。
str.expandtabs(tabsize=8)tabsize -- 指定转换字符串中的 tab 符号('\t')转为空格的字符数。该方法返回字符串中的 tab 符号('\t')转为空格后生成的新字符串。

str.find(str, beg=0, end=len(string))   Python find() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果包含子字符串返回开始的索引值，否则返回-1。

str.index(str, beg=0, end=len(string))    Python index() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，该方法与 python find()方法一样，只不过如果str不在 string中会报一个异常。

str.isalnum()  如果 string 至少有一个字符并且所有字符都是字母或数字则返
回 True,否则返回 False
	
str.isalpha()  如果 string 至少有一个字符并且所有字符都是字母则返回 True,
否则返回 False

string.isdecimal() 如果 string 只包含十进制数字则返回 True 否则返回 False.

string.isdigit() 如果 string 只包含数字则返回 True 否则返回 False.
string.islower()如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False

string.isnumeric() 如果 string 中只包含数字字符，则返回 True，否则返回 False
string.isspace() 如果 string 中只包含空格，则返回 True，否则返回 False.

string.istitle() 如果 string 是标题化的(见 title())则返回 True，否则返回 False
string.isupper() 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False

string.join(seq) 以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串
str = "-";
seq = ("a", "b", "c"); # 字符串序列
print str.join( seq );
a-b-c

str.ljust(width[, fillchar])返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串
string.lower()   转换 string 中所有大写字符为小写.

string.lstrip()  截掉 string 左边的空格
str.maketrans(intab, outtab)   maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。
#!/usr/bin/python
# -*- coding: UTF-8 -*-

from string import maketrans   # 必须调用 maketrans 函数。

intab = "aeiou"
outtab = "12345"
trantab = maketrans(intab, outtab)

str = "this is string example....wow!!!";
print str.translate(trantab);

th3s 3s str3ng 2x1mpl2....w4w!!!

max(str) 返回字符串 str 中最大的字母。
min(str)  	返回字符串 str 中最小的字母。

string.partition(str)  有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把 字 符 串 string 分 成 一 个 3 元 素 的 元 组 (string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str == string. 
 返回一个3元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。

str.replace(old, new[, max])  返回字符串中的 old（旧字符串） 替换成 new(新字符串)后生成的新字符串，如果指定第三个参数max，则替换不超过 max 次

string.rfind(str, beg=0,end=len(string) )类似于 find()函数，不过是从右边开始查找. 

string.rindex( str, beg=0,end=len(string))  类似于 index()，不过是从右边开始.

string.rpartition(str) 类似于 partition()函数,不过是从右边开始查找.

str.split(str="", num=string.count(str)). 通过指定分隔符对字符串进行切片，如果参数num 有指定值，则仅分隔 num 个子字符串

str.splitlines([keepends]) 按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。

str1 = 'ab c\n\nde fg\rkl\r\n'
print str1.splitlines();

str2 = 'ab c\n\nde fg\rkl\r\n'
print str2.splitlines(True)

['ab c', '', 'de fg', 'kl']
['ab c\n', '\n', 'de fg\r', 'kl\r\n']

str.startswith(str, beg=0,end=len(string)); startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查。

str.strip([chars]);方法用于移除字符串头尾指定的字符（默认为空格）。

string.swapcase()  	翻转 string 中的大小写
string.title() 返回"标题化"的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())

str.translate(table[, deletechars]);  translate() 方法根据参数table给出的表(包含 256 个字符)转换字符串的字符, 要过滤掉的字符放到 del 参数中。
string.upper()  转换 string 中的小写字母为大写
string.zfill(width) 返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0

string.isdecimal()   isdecimal()方法检查字符串是否只包含十进制字符。这种方法只存在于unicode对象。


列表的方法：
cmp(list1, list2) 
len(list) 列表元素个数
max(list) 返回列表元素最大值
min(list) 返回列表元素最小值

list(seq)将元组转换为列表

list.append(obj)
在列表末尾添加新的对象
list.count(obj)
统计某个元素在列表中出现的次数
list.extend(seq)
在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
list.index(obj)
从列表中找出某个值第一个匹配项的索引位置
list.insert(index, obj)
将对象插入列表
list.pop(obj=list[-1])
移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
list.remove(obj)
移除列表中某个值的第一个匹配项
list.reverse()
反向列表中元素
list.sort([func])
对原列表进行排序

元祖内置函数：
cmp(tuple1, tuple2)
比较两个元组元素。
len(tuple)
计算元组元素个数。
max(tuple)
返回元组中元素最大值。
min(tuple)
返回元组中元素最小值。
tuple(seq)
将列表转换为元组。

字典内置函数&方法：
cmp(dict1, dict2)
比较两个字典元素
len(dict)
计算字典元素个数，即键的总数。
str(dict)
输出字典可打印的字符串表示。
type(variable)
返回输入的变量类型，如果变量是字典就返回字典类型。

radiansdict.clear()
删除字典内所有元素
radiansdict.copy()
返回一个字典的浅复制
dict.fromkeys(seq[, value]))  函数用于创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值。
radiansdict.get(key, default=None)
返回指定键的值，如果值不在字典中返回default值

radiansdict.has_key(key)
如果键在字典dict里返回true，否则返回false

radiansdict.items()
以列表返回可遍历的(键, 值) 元组数组

radiansdict.keys()
以列表返回一个字典所有的键

radiansdict.setdefault(key, default=None)
和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default

radiansdict.update(dict2)
把字典dict2的键/值对更新到dict里

radiansdict.values()
以列表返回字典中的所有值
