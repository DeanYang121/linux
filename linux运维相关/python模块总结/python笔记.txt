map/reduce
Python 内建了 map()和 reduce()函数
map()函数接收两个参数，一个是函数，一个是 Iterable，map 将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator 返回。
由于结果 r 是一个Iterator， Iterator 是惰性序列，因此通过 list()函数让它把整个序列都计算出来并返回一个 list。

list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)

Python 内建的 filter()函数用于过滤序列
filter()也接收一个函数和一个序列
filter()把传入的函数依次作用于每个元素，然后根据返回值是 True 还是 False 决定保留还是丢弃该元素
def not_empty(s):
return s and s.strip()
list(filter(not_empty, ['A', '', 'B', None, 'C', ' ']))
# 结果: ['A', 'B', 'C']  filter()函数返回的是一个 Iterator

lambda语句中，冒号前是参数，可以有多个，用逗号隔开，冒号右边的返回值。lambda语句构建的其实是一个函数对象。
Python 内置的 sorted()函数就可以对 list 进行排序：
sorted()函数也是一个高阶函数，它还可以接收一个 key 函数来
sorted([36, 5, -12, 9, -21], key=abs)
[5, 9, -12, -21, 36]

sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower)
['about', 'bob', 'Credit', 'Zoo']

sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower,reverse=True)
['Zoo', 'Credit', 'bob', 'about']

def count():
fs = []
for i in range(1,4）：
def f():
return i*i
fs.append(f)
return fs
f1, f2, f3 = count()

在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的
3 个函数都返回了.

结果全部都是 9！原因就在于返回的函数引用了变量 i，但它并非立刻执行。
等到 3 个函数都返回时，它们所引用的变量 i 已经变成了 3，因此最终
结果为 9。
返回闭包时牢记的一点就是：返回函数不要引用任何循环变量， 或者后
续会发生变化的变量。

如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的
参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到
函数参数的值不变：
def count():
def f(j):
def g():
return j*j
return g
fs = []
for i in range(1, 4):
fs.append(f(i)) # f(i)立刻被执行，因此 i 的当前值被传入 f()
return fs

装饰器：
>>> def now():
... print('2015-3-25')
...
>>> f = now
>>> f()
2015-3-25

现在，假设我们要增强 now()函数的功能，比如，在函数调用前后自动
打印日志，但又不希望修改 now()函数的定义，这种在代码运行期间动
态增加功能的方式，称之为“装饰器”（ Decorator）。

def log(func):
def wrapper(*args, **kw):
print('call %s():' % func.__name__)
return func(*args, **kw)
return wrappe

@log
def now():
print('2015-3-25')

>>> now()
call now():
2015-3-25

把@log 放到 now()函数的定义处，相当于执行了语句
now = log(now)


def log(text):
def decorator(func):
def wrapper(*args, **kw):
print('%s %s():' % (text, func.__name__))
return func(*args, **kw)
return wrapper
return decorator


@log('execute')
def now():
print('2015-3-25')
p146

import functools
def log(text):
def decorator(func):
@functools.wraps(func)
def wrapper(*args, **kw):
print('%s %s():' % (text, func.__name__))
return func(*args, **kw)
return wrapper
return decorator

模块：
每一个包目录下面都会有一个__init__.py的文件

class Animal(object):
    def run(self):
        print('Animal is running...')

class Dog(Animal):
    pass

class Cat(Animal):
    pass

